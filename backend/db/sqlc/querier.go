// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
)

type Querier interface {
	//AddAccountBalancer
	//
	//  UPDATE accounts
	//  SET balance = balance + $1
	//  WHERE id = $2
	//  RETURNING id, owner, balance, currency, created_at
	AddAccountBalancer(ctx context.Context, arg AddAccountBalancerParams) (Accounts, error)
	//CreateAccount
	//
	//  INSERT INTO accounts(owner, balance, currency)
	//  VALUES ($1, $2, $3)
	//  RETURNING id, owner, balance, currency, created_at
	CreateAccount(ctx context.Context, arg CreateAccountParams) (Accounts, error)
	//CreateEntry
	//
	//  INSERT INTO entries(account_id, amount)
	//  VALUES ($1, $2)
	//  RETURNING id, account_id, amount, created_at
	CreateEntry(ctx context.Context, arg CreateEntryParams) (Entries, error)
	//CreateTransfer
	//
	//  INSERT INTO transfers(from_account_id, to_account_id, amount)
	//  VALUES ($1, $2, $3)
	//  RETURNING id, from_account_id, to_account_id, amount, created_at
	CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfers, error)
	//CreateUser
	//
	//  INSERT INTO users (username,
	//                     full_name,
	//                     hashed_password,
	//                     email)
	//  VALUES ($1, $2, $3, $4)
	//  RETURNING username, full_name, hashed_password, email, password_changed_at, created_at, updated_at
	CreateUser(ctx context.Context, arg CreateUserParams) (Users, error)
	//DeleteAccount
	//
	//  DELETE
	//  FROM accounts
	//  WHERE id = $1
	DeleteAccount(ctx context.Context, id int64) error
	//GetAccount
	//
	//  SELECT id, owner, balance, currency, created_at
	//  FROM accounts
	//  WHERE id = $1
	//  ORDER BY id
	GetAccount(ctx context.Context, id int64) (Accounts, error)
	//GetAccountForUpdate
	//
	//  SELECT id, owner, balance, currency, created_at
	//  FROM accounts
	//  WHERE id = $1
	//      FOR NO KEY UPDATE
	GetAccountForUpdate(ctx context.Context, id int64) (Accounts, error)
	//GetEntry
	//
	//  SELECT id, account_id, amount, created_at
	//  FROM entries
	//  WHERE id = $1
	//  LIMIT 1
	GetEntry(ctx context.Context, id int64) (Entries, error)
	//GetTransfer
	//
	//  SELECT id, from_account_id, to_account_id, amount, created_at
	//  FROM transfers
	//  WHERE id = $1
	//  LIMIT 1
	GetTransfer(ctx context.Context, id int64) (Transfers, error)
	//GetUser
	//
	//  SELECT username, full_name, hashed_password, email, password_changed_at, created_at, updated_at
	//  FROM users
	//  WHERE username = $1
	//  LIMIT 1
	GetUser(ctx context.Context, username string) (Users, error)
	//ListAccounts
	//
	//  SELECT id, owner, balance, currency, created_at
	//  FROM accounts
	//  ORDER BY id
	//  LIMIT $1 OFFSET $2
	ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Accounts, error)
	//ListEntry
	//
	//  SELECT id, account_id, amount, created_at
	//  FROM entries
	//  WHERE account_id = $1
	//  ORDER BY id
	//  LIMIT $2 OFFSET $3
	ListEntry(ctx context.Context, arg ListEntryParams) ([]Entries, error)
	//ListTransfers
	//
	//  SELECT id, from_account_id, to_account_id, amount, created_at
	//  FROM transfers
	//  WHERE from_account_id = $1
	//     OR to_account_id = $2
	//  ORDER BY id
	//  LIMIT $3 OFFSET $4
	ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfers, error)
	//UpdateAccount
	//
	//  UPDATE accounts
	//  SET balance = $2
	//  WHERE id = $1
	//  RETURNING id, owner, balance, currency, created_at
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Accounts, error)
}

var _ Querier = (*Queries)(nil)
