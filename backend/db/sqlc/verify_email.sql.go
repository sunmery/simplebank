// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verify_email.sql

package db

import (
	"context"
)

const CreateVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails(username, email, secret_code)
VALUES ($1, $2, $3)
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secretCode"`
}

// CreateVerifyEmail
//
//	INSERT INTO verify_emails(username, email, secret_code)
//	VALUES ($1, $2, $3)
//	RETURNING id, username, email, secret_code, is_used, created_at, expired_at
func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmails, error) {
	row := q.db.QueryRow(ctx, CreateVerifyEmail, arg.Username, arg.Email, arg.SecretCode)
	var i VerifyEmails
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const UpdateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE verify_emails
SET is_used = TRUE
WHERE id = $1
  AND secret_code = $2
  AND is_used = FALSE
  AND expired_at > now()
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secretCode"`
}

// 更新is_used为已使用(TRUE),
// 条件是一次性密码(secret_code)相同且没有使用过(is_used = FALSE)和在有效期内(expired_at > now())
//
//	UPDATE verify_emails
//	SET is_used = TRUE
//	WHERE id = $1
//	  AND secret_code = $2
//	  AND is_used = FALSE
//	  AND expired_at > now()
//	RETURNING id, username, email, secret_code, is_used, created_at, expired_at
func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmails, error) {
	row := q.db.QueryRow(ctx, UpdateVerifyEmail, arg.ID, arg.SecretCode)
	var i VerifyEmails
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
