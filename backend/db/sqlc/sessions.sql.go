// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateSessions = `-- name: CreateSessions :one
INSERT INTO sessions(id,username, refresh_token, user_agent, client_ip, is_blocked, expires_at)
VALUES ($1,$2,$3,$4,$5,$6,$7)
RETURNING id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateSessionsParams struct {
	ID           uuid.UUID          `json:"id"`
	Username     string             `json:"username"`
	RefreshToken string             `json:"refreshToken"`
	UserAgent    string             `json:"userAgent"`
	ClientIp     string             `json:"clientIp"`
	IsBlocked    bool               `json:"isBlocked"`
	ExpiresAt    pgtype.Timestamptz `json:"expiresAt"`
}

// CreateSessions
//
//	INSERT INTO sessions(id,username, refresh_token, user_agent, client_ip, is_blocked, expires_at)
//	VALUES ($1,$2,$3,$4,$5,$6,$7)
//	RETURNING id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
func (q *Queries) CreateSessions(ctx context.Context, arg CreateSessionsParams) (Sessions, error) {
	row := q.db.QueryRow(ctx, CreateSessions,
		arg.ID,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Sessions
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const GetSessions = `-- name: GetSessions :one
SELECT id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
FROM sessions
WHERE id = $1
LIMIT 1
`

// GetSessions
//
//	SELECT id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
//	FROM sessions
//	WHERE id = $1
//	LIMIT 1
func (q *Queries) GetSessions(ctx context.Context, id uuid.UUID) (Sessions, error) {
	row := q.db.QueryRow(ctx, GetSessions, id)
	var i Sessions
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
