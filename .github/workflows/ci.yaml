# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Deploy to production
run-name: ${{ github.actor }} is learning GitHub Actions

on:
  push:
    branches: [ "main", "beta" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Login Cloud Registry
        run: docker login ${{secrets.REGISTRY}} --username=${{secrets.REGISTRY_USERNAME}} --password=${{secrets.REGISTRY_PASSWORD}}

      - name: Build, tag, and push image to Cloud Registry
        env:
          version: v2.0.0
          port: 8080
        run: |
          pwd
          ls
          cd backend || true
          docker build \
            --progress=plain \
            -t ${{secrets.REGISTER_REPOSITORY}}:$version . \
            --build-arg GOOS=linux \
            --build-arg ARCH=amd64 \
            --build-arg CGO_ENABLED=0 \
            --build-arg GO_IMAGE=golang:1.23.1-alpine3.20 \
            --build-arg version=$version \
            --build-arg PORT=$port
          docker tag ${{secrets.REGISTER_REPOSITORY}}:$version ${{secrets.REGISTRY}}/${{secrets.REGISTER_REPOSITORY}}:$version
          docker push ${{secrets.REGISTRY}}/${{secrets.REGISTER_REPOSITORY}}:$version

  test:
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:15-alpine
        # Provide the password for postgres
        env:
          # 数据库用户名
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          # 数据库用户密码
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          # 此可选环境变量可用于为首次启动映像时创建的默认数据库定义不同的名称。如果未指定，则将使用 POSTGRES_USER 的值。
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Maps tcp port 5432 on service container to the host
        ports:
          - '5432:5432'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/
          which migrate

      - name: Run database migrate
        run: |
          pwd
          make migrate-up

      - name: Test
        run: |
          cd backend
          make test

  deploy:
    run-on: ubuntu:latest
    steps:
      - name: Set up Kustomize
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Install kubectl
        run: |
          curl -Lo kubectl

      - name: Connect Kubernetes Cluster
        run: |
          echo "${{secrets.KUBE_CONF}}" > config
          kubectl --kubeconfig config
          
      # Deploy the Docker image to the TKE cluster
      - name: Deploy
        run: |
          ./kustomize edit set image ${TKE_IMAGE_URL}:${GITHUB_SHA}
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/${DEPLOYMENT_NAME}
          kubectl get services -o wide

