# 命名空间
apiVersion: v1
kind: Namespace
metadata:
  name: backend
---
# 部署清单
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: http
          image: ccr.ccs.tencentyun.com/lisa/backend:v0.2.7
          ports:
            - containerPort: 30001
          # Liveness Probe配置
          # 目的是定期检查容器内应用的健康状况。如果探测失败（达到failureThreshold设定的次数），
          # Kubernetes将认为容器不健康并自动重启该容器。
          livenessProbe:
            # 通过HTTP GET请求检查
            httpGet:
              # 探测的路径，应指向一个能快速响应且表明应用运行正常的端点
              path: /helloworld/lisa
              # 应用监听的端口
              port: 30001
            # 部署后首次探测前等待的时间，给予应用足够的启动时间
            initialDelaySeconds: 60
            # 探测间隔时间，每隔多久进行一次检查
            periodSeconds: 60
            # 请求超时时间，超过此时间认为探测失败
            timeoutSeconds: 5
            # 探测失败次数的阈值，连续失败达到此次数后，将采取相应动作（此处为重启容器）
            failureThreshold: 3

          # Readiness Probe配置
          # 用于判断容器是否已准备好接收外部请求。如果未准备好（探测失败），Kubernetes不会将流量路由到该容器，直到探测成功。
          readinessProbe:
            # 通过HTTP GET方式检查
            httpGet:
              # 确保应用能够处理即将到来的请求
              path: /helloworld
              port: 30001
            # 相较于Liveness Probe，Readiness Probe可以更快开始，因为只需等待应用启动的基本就绪
            initialDelaySeconds: 15
            # 更频繁地检查，以便迅速响应容器就绪状态的变化
            periodSeconds: 5
            # 缩短超时时间，加快反馈速度
            timeoutSeconds: 3
            # 连续失败达到此次数，Kubernetes将认为容器尚未准备好服务请求
            failureThreshold: 3
        - name: grpc
          image: ccr.ccs.tencentyun.com/lisa/backend:v0.2.7
          ports:
            - containerPort: 30002
          # Liveness Probe配置
          # 目的是定期检查容器内应用的健康状况。如果探测失败（达到failureThreshold设定的次数），
          # Kubernetes将认为容器不健康并自动重启该容器。
          livenessProbe:
            # 通过HTTP GET请求检查
            httpGet:
              # 探测的路径，应指向一个能快速响应且表明应用运行正常的端点
              path: /helloworld/lisa
              # 应用监听的端口
              port: 30002
            # 部署后首次探测前等待的时间，给予应用足够的启动时间
            initialDelaySeconds: 60
            # 探测间隔时间，每隔多久进行一次检查
            periodSeconds: 60
            # 请求超时时间，超过此时间认为探测失败
            timeoutSeconds: 5
            # 探测失败次数的阈值，连续失败达到此次数后，将采取相应动作（此处为重启容器）
            failureThreshold: 3

          # Readiness Probe配置
          # 用于判断容器是否已准备好接收外部请求。如果未准备好（探测失败），Kubernetes不会将流量路由到该容器，直到探测成功。
          readinessProbe:
            # 通过HTTP GET方式检查
            httpGet:
              # 确保应用能够处理即将到来的请求
              path: /helloworld
              port: 30002
            # 相较于Liveness Probe，Readiness Probe可以更快开始，因为只需等待应用启动的基本就绪
            initialDelaySeconds: 15
            # 更频繁地检查，以便迅速响应容器就绪状态的变化
            periodSeconds: 5
            # 缩短超时时间，加快反馈速度
            timeoutSeconds: 3
            # 连续失败达到此次数，Kubernetes将认为容器尚未准备好服务请求
            failureThreshold: 3
          volumeMounts:
            - name: kratos-config
              mountPath: /data/conf
      volumes:
        - name: kratos-config
          configMap:
            # 提供包含要添加到容器中的文件的 ConfigMap 的名称
            name: kratos-config
      restartPolicy: Always
---
# 服务清单
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: backend
spec:
  selector:
    app: backend
  ports:
    - name: http
      protocol: TCP
      port: 30001
      targetPort: 30001
    - name: grpc
      protocol: TCP
      port: 30002
      targetPort: 30002
  type: LoadBalancer
